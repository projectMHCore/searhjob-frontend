<?php
/**
 * –ì–õ–û–ë–ê–õ–¨–ù–´–ô –°–ò–°–¢–ï–ú–ù–´–ô –¢–ï–°–¢ SearchJob
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 * –°–æ–∑–¥–∞–Ω–æ: 5 –∏—é–Ω—è 2025 –≥.
 */

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, –¥–æ –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
error_reporting(E_ALL);
ini_set('display_errors', 0); // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
ini_set('expose_php', 0); // –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é PHP
ini_set('max_execution_time', 300); // 5 –º–∏–Ω—É—Ç

?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç SearchJob</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 300;
        }
        
        .header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1rem;
        }
        
        .content {
            padding: 30px;
        }
        
        .test-section {
            margin-bottom: 40px;
            border: 1px solid #e1e8ed;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .test-header {
            background: #f8fafc;
            padding: 20px;
            border-bottom: 1px solid #e1e8ed;
        }
        
        .test-header h2 {
            margin: 0;
            color: #2d3748;
            font-size: 1.5rem;
        }
        
        .test-body {
            padding: 25px;
        }
        
        .status {
            display: inline-block;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
            margin-right: 10px;
        }
        
        .status.success {
            background: #dcfce7;
            color: #166534;
            border: 1px solid #bbf7d0;
        }
        
        .status.error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
        
        .status.warning {
            background: #fef3c7;
            color: #d97706;
            border: 1px solid #fde68a;
        }
        
        .status.info {
            background: #dbeafe;
            color: #2563eb;
            border: 1px solid #bfdbfe;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .info-card {
            background: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }
        
        .info-card h4 {
            margin: 0 0 15px 0;
            color: #374151;
        }
        
        .code-block {
            background: #1a202c;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            overflow-x: auto;
            margin: 15px 0;
        }
        
        .table-container {
            overflow-x: auto;
            margin: 20px 0;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        
        th {
            background: #f1f5f9;
            font-weight: 600;
            color: #374151;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .metric:last-child {
            border-bottom: none;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #10b981, #059669);
            transition: width 0.3s ease;
        }
        
        .timestamp {
            color: #6b7280;
            font-size: 0.9rem;
            margin-top: 20px;
            text-align: center;
            padding: 20px;
            background: #f9fafb;
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç</h1>
            <p>SearchJob Application - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</p>
        </div>
        
        <div class="content">
            <?php
            $startTime = microtime(true);
            $totalTests = 0;
            $passedTests = 0;
            $errors = [];
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
            function displayStatus($condition, $successMsg, $errorMsg) {
                global $totalTests, $passedTests, $errors;
                $totalTests++;
                
                if ($condition) {
                    $passedTests++;
                    echo '<span class="status success">‚úÖ ' . $successMsg . '</span>';
                    return true;
                } else {
                    $errors[] = $errorMsg;
                    echo '<span class="status error">‚ùå ' . $errorMsg . '</span>';
                    return false;
                }
            }
            ?>
            
            <!-- 1. PHP Environment Test -->
            <div class="test-section">
                <div class="test-header">
                    <h2>üêò PHP Environment</h2>
                </div>
                <div class="test-body">
                    <?php
                    displayStatus(version_compare(PHP_VERSION, '7.4.0', '>='), 
                        'PHP –≤–µ—Ä—Å–∏—è: ' . PHP_VERSION, 
                        'PHP –≤–µ—Ä—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞: ' . PHP_VERSION);
                    
                    echo '<br>';
                    displayStatus(extension_loaded('mysqli'), 
                        'MySQL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 
                        'MySQL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                    
                    echo '<br>';
                    displayStatus(extension_loaded('curl'), 
                        'CURL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 
                        'CURL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                    
                    echo '<br>';
                    displayStatus(extension_loaded('xml'), 
                        'XML —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 
                        'XML —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                    ?>
                    
                    <div class="info-grid">
                        <div class="info-card">
                            <h4>üìä PHP –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</h4>
                            <div class="metric">
                                <span>–í–µ—Ä—Å–∏—è PHP:</span>
                                <strong><?= PHP_VERSION ?></strong>
                            </div>
                            <div class="metric">
                                <span>Memory Limit:</span>
                                <strong><?= ini_get('memory_limit') ?></strong>
                            </div>
                            <div class="metric">
                                <span>Max Execution Time:</span>
                                <strong><?= ini_get('max_execution_time') ?>s</strong>
                            </div>
                            <div class="metric">
                                <span>Upload Max Size:</span>
                                <strong><?= ini_get('upload_max_filesize') ?></strong>
                            </div>
                        </div>
                        
                        <div class="info-card">
                            <h4>üîß –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</h4>
                            <?php
                            $required_extensions = ['mysqli', 'curl', 'xml', 'json', 'session'];
                            foreach ($required_extensions as $ext) {
                                $loaded = extension_loaded($ext);
                                echo '<div class="metric">';
                                echo '<span>' . $ext . ':</span>';
                                echo '<span class="status ' . ($loaded ? 'success' : 'error') . '">';
                                echo $loaded ? '‚úÖ' : '‚ùå';
                                echo '</span>';
                                echo '</div>';
                            }
                            ?>
                        </div>
                    </div>
                </div>
            </div>
              <!-- 2. Database Connection Test -->
            <div class="test-section">
                <div class="test-header">
                    <h2>üóÑÔ∏è Database Connection</h2>
                </div>
                <div class="test-body">
                    <?php                    try {
                        $config = require __DIR__ . '/../../../backend/config/db.php';
                        
                        $dbConnected = false;
                        $dbError = '';
                        $dbInfo = [];
                        $conn = null;
                        
                        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        $conn = new mysqli($config['host'], $config['username'], $config['password'], $config['database'], $config['port']);
                        
                        if ($conn->connect_error) {
                            $dbError = $conn->connect_error;
                        } else {
                            $dbConnected = true;
                            
                            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                $result = $conn->query("SELECT VERSION() as version");
                                if ($result && $row = $result->fetch_assoc()) {
                                    $dbInfo['version'] = $row['version'];
                                }
                                
                                $result = $conn->query("SELECT DATABASE() as db_name");
                                if ($result && $row = $result->fetch_assoc()) {
                                    $dbInfo['database'] = $row['db_name'];
                                }
                                  $dbInfo['host'] = $conn->host_info;
                                $dbInfo['charset'] = $conn->character_set_name();
                        }
                        
                        displayStatus($dbConnected, 
                            '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ', 
                            '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ' . $dbError);
                        
                        if ($dbConnected) {
                            echo '<div class="info-grid">';
                            echo '<div class="info-card">';
                            echo '<h4>üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h4>';
                            foreach ($dbInfo as $key => $value) {
                                echo '<div class="metric">';
                                echo '<span>' . ucfirst($key) . ':</span>';
                                echo '<strong>' . htmlspecialchars($value) . '</strong>';
                                echo '</div>';
                            }
                            echo '</div>';
                            echo '</div>';
                        }
                        
                    } catch (Exception $e) {
                        displayStatus(false, '', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ' . $e->getMessage());
                    }
                    ?>
                </div>
            </div>
            
            <!-- 3. Database Tables Test -->
            <div class="test-section">                <div class="test-header">
                    <h2>üìã Database Tables</h2>
                </div>
                <div class="test-body">
                    <?php
                    if (isset($conn) && $dbConnected) {
                        $expectedTables = ['users', 'vacancies', 'applications'];
                        $existingTables = [];
                        
                        $result = $conn->query("SHOW TABLES");
                        if ($result) {
                            while ($row = $result->fetch_array()) {
                                $existingTables[] = $row[0];
                            }
                        }
                        
                        echo '<div class="table-container">';
                        echo '<table>';
                        echo '<thead><tr><th>–¢–∞–±–ª–∏—Ü–∞</th><th>–°—Ç–∞—Ç—É—Å</th><th>–ó–∞–ø–∏—Å–µ–π</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr></thead>';
                        echo '<tbody>';
                        
                        foreach ($expectedTables as $table) {
                            $exists = in_array($table, $existingTables);
                            $count = 0;
                            
                            if ($exists) {
                                $countResult = $conn->query("SELECT COUNT(*) as count FROM `$table`");
                                if ($countResult && $row = $countResult->fetch_assoc()) {
                                    $count = $row['count'];
                                }
                            }
                            
                            echo '<tr>';
                            echo '<td><strong>' . $table . '</strong></td>';
                            echo '<td>';
                            if ($exists) {
                                echo '<span class="status success">‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç</span>';
                            } else {
                                echo '<span class="status error">‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</span>';
                            }
                            echo '</td>';
                            echo '<td>' . ($exists ? number_format($count) : 'N/A') . '</td>';
                            echo '<td>';
                            if ($exists) {
                                echo '<span class="status info">üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä</span>';
                            } else {
                                echo '<span class="status warning">üîß –°–æ–∑–¥–∞—Ç—å</span>';
                            }
                            echo '</td>';
                            echo '</tr>';
                        }
                        
                        echo '</tbody>';
                        echo '</table>';
                        echo '</div>';
                        
                        $allTablesExist = count(array_intersect($expectedTables, $existingTables)) === count($expectedTables);
                        displayStatus($allTablesExist, 
                            '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç', 
                            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î');
                    } else {
                        echo '<span class="status error">‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</span>';
                    }
                    ?>
                </div>
            </div>
            
            <!-- 4. API Endpoints Test -->
            <div class="test-section">
                <div class="test-header">
                    <h2>üîó API Endpoints</h2>
                </div>
                <div class="test-body">
                    <?php                    $apiEndpoints = [
                        'ApiController.php' => '../../../backend/controllers/ApiController.php',
                        'XmlApiController.php' => '../../../backend/controllers/XmlApiController.php',
                        'VacancyApiController.php' => '../../../backend/controllers/VacancyApiController.php',
                        'ProfileController.php' => '../../../backend/controllers/ProfileController.php'
                    ];
                    
                    echo '<div class="table-container">';
                    echo '<table>';
                    echo '<thead><tr><th>API –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä</th><th>–°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞</th><th>–†–∞–∑–º–µ—Ä</th><th>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ</th></tr></thead>';
                    echo '<tbody>';
                    
                    foreach ($apiEndpoints as $name => $path) {
                        $fullPath = __DIR__ . '/' . $path;
                        $exists = file_exists($fullPath);
                        
                        echo '<tr>';
                        echo '<td><strong>' . $name . '</strong></td>';
                        echo '<td>';
                        if ($exists) {
                            echo '<span class="status success">‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω</span>';
                            displayStatus(true, '', '');
                        } else {
                            echo '<span class="status error">‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</span>';
                            displayStatus(false, '', 'API —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' . $name);
                        }
                        echo '</td>';
                        echo '<td>' . ($exists ? number_format(filesize($fullPath)) . ' –±–∞–π—Ç' : 'N/A') . '</td>';
                        echo '<td>' . ($exists ? date('Y-m-d H:i:s', filemtime($fullPath)) : 'N/A') . '</td>';
                        echo '</tr>';
                    }
                    
                    echo '</tbody>';
                    echo '</table>';
                    echo '</div>';
                    ?>
                </div>
            </div>
            
            <!-- 5. File System Test -->
            <div class="test-section">
                <div class="test-header">
                    <h2>üìÅ File System</h2>
                </div>
                <div class="test-body">
                    <?php                    $directories = [
                        'backend/logs' => '../../../backend/logs',
                        'backend/xml' => '../../../backend/xml',
                        'backend/data' => '../../../backend/data',
                        'frontend/assets' => '../../assets'
                    ];
                    
                    foreach ($directories as $name => $path) {
                        $fullPath = __DIR__ . '/' . $path;
                        $exists = is_dir($fullPath);
                        $writable = $exists ? is_writable($fullPath) : false;
                        
                        echo '<div style="margin: 10px 0;">';
                        echo '<strong>' . $name . ':</strong> ';
                        
                        if ($exists && $writable) {
                            displayStatus(true, '–°—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏', '');
                        } elseif ($exists) {
                            displayStatus(false, '', '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: ' . $name);
                        } else {
                            displayStatus(false, '', '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ' . $name);
                        }
                        echo '</div>';
                    }
                    ?>
                </div>
            </div>
            
            <!-- 6. XML API Test -->
            <div class="test-section">
                <div class="test-header">
                    <h2>üóÇÔ∏è XML API</h2>
                </div>
                <div class="test-body">
                    <?php
                    $xmlApiFile = __DIR__ . '/../../../backend/controllers/XmlApiController.php';
                    $xmlExists = file_exists($xmlApiFile);
                    
                    displayStatus($xmlExists, 
                        'XML API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞–π–¥–µ–Ω', 
                        'XML API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                    
                    if ($xmlExists) {                        echo '<br>';
                        $xmlDir = __DIR__ . '/../../../backend/xml';
                        $xmlDirExists = is_dir($xmlDir);
                        
                        displayStatus($xmlDirExists, 
                            'XML –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 
                            'XML –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                          if ($xmlDirExists) {
                            $xmlFiles = glob($xmlDir . '/*.xml');
                            echo '<div class="info-card" style="margin-top: 20px;">';
                            echo '<h4>üìÑ XML —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ</h4>';
                            echo '<div class="metric">';
                            echo '<span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ XML —Ñ–∞–π–ª–æ–≤:</span>';
                            echo '<strong>' . count($xmlFiles) . '</strong>';
                            echo '</div>';
                            if (count($xmlFiles) > 0) {
                                echo '<div class="code-block">';
                                foreach (array_slice($xmlFiles, 0, 5) as $file) {
                                    echo basename($file) . ' (' . number_format(filesize($file)) . ' –±–∞–π—Ç)<br>';
                                }
                                if (count($xmlFiles) > 5) {
                                    echo '... –∏ –µ—â–µ ' . (count($xmlFiles) - 5) . ' —Ñ–∞–π–ª–æ–≤';
                                }
                                echo '</div>';
                            }
                            echo '</div>';
                        }
                    }
                    ?>
                </div>
            </div>
            
            <!-- 7. Security Test -->
            <div class="test-section">
                <div class="test-header">
                    <h2>üîí Security</h2>
                </div>
                <div class="test-body">
                    <?php                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    $securityChecks = [
                        'display_errors' => ['off', '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–æ', '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∫–ª—é—á–µ–Ω–æ'],
                        'allow_url_include' => ['off', 'URL include –æ—Ç–∫–ª—é—á–µ–Ω', 'URL include –≤–∫–ª—é—á–µ–Ω (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)']
                    ];
                      foreach ($securityChecks as $setting => $check) {
                        $value = ini_get($setting);
                        $secure = ($value == $check[0] || $value == '' || $value == '0');
                        
                        displayStatus($secure, $check[1], $check[2]);
                        echo '<br>';
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π
                    displayStatus(session_status() === PHP_SESSION_ACTIVE, 
                        '–°–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 
                        '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Å—Å–∏—è–º–∏');
                    ?>
                </div>
            </div>            
            <!-- Summary -->
            <div class="test-section">
                <div class="test-header">
                    <h2>üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h2>
                </div>
                <div class="test-body">
                    <?php
                    $successRate = $totalTests > 0 ? round(($passedTests / $totalTests) * 100) : 0;
                    ?>
                    
                    <div class="info-grid">
                        <div class="info-card">
                            <h4>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤</h4>
                            <div class="metric">
                                <span>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</span>
                                <strong><?= $totalTests ?></strong>
                            </div>
                            <div class="metric">
                                <span>–ü—Ä–æ–π–¥–µ–Ω–æ:</span>
                                <strong style="color: #059669;"><?= $passedTests ?></strong>
                            </div>
                            <div class="metric">
                                <span>–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ:</span>
                                <strong style="color: #dc2626;"><?= $totalTests - $passedTests ?></strong>
                            </div>
                            <div class="metric">
                                <span>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</span>
                                <strong><?= $successRate ?>%</strong>
                            </div>
                            
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: <?= $successRate ?>%;"></div>
                            </div>
                        </div>
                        
                        <div class="info-card">
                            <h4>üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</h4>
                            <?php
                            if ($successRate >= 90) {
                                echo '<span class="status success">üèÜ –û—Ç–ª–∏—á–Ω–æ</span>';
                                echo '<p>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>';
                            } elseif ($successRate >= 70) {
                                echo '<span class="status warning">‚ö†Ô∏è –•–æ—Ä–æ—à–æ</span>';
                                echo '<p>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å.</p>';
                            } else {
                                echo '<span class="status error">üö® –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è</span>';
                                echo '<p>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.</p>';
                            }
                            ?>
                        </div>
                    </div>
                    
                    <?php if (!empty($errors)): ?>
                    <div style="margin-top: 30px;">
                        <h4>üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</h4>
                        <div class="code-block" style="background: #fee2e2; color: #991b1b; border: 1px solid #fecaca;">
                            <?php foreach ($errors as $error): ?>
                                ‚Ä¢ <?= htmlspecialchars($error) ?><br>
                            <?php endforeach; ?>
                        </div>
                    </div>
                    <?php endif; ?>
                </div>
            </div>
            
            <div class="timestamp">
                <strong>–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:</strong> <?= date('Y-m-d H:i:s') ?><br>
                <strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> <?= round(microtime(true) - $startTime, 3) ?> —Å–µ–∫—É–Ω–¥<br>
                <strong>–°–µ—Ä–≤–µ—Ä:</strong> <?= $_SERVER['SERVER_NAME'] ?? 'localhost' ?> | 
                <strong>PHP:</strong> <?= PHP_VERSION ?>
            </div>
        </div>
    </div>

    <script>
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        // setInterval(() => location.reload(), 30000);
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', function() {
            const sections = document.querySelectorAll('.test-section');
            sections.forEach((section, index) => {
                setTimeout(() => {
                    section.style.opacity = '0';
                    section.style.transform = 'translateY(20px)';
                    section.style.transition = 'all 0.5s ease';
                    
                    setTimeout(() => {
                        section.style.opacity = '1';
                        section.style.transform = 'translateY(0)';
                    }, 100);
                }, index * 100);
            });
        });
    </script>
</body>
</html>
